(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.showButtonAesthetics = showButtonAesthetics;
exports.showButtonElos = showButtonElos;
exports.showButtonEpilation = showButtonEpilation;
exports.showButtonMassage = showButtonMassage;
exports.showButtonText = showButtonText;
exports.showButtonThreadLifting = showButtonThreadLifting;
exports.showButtonWrapBody = showButtonWrapBody;
var buttonShow = document.querySelector('.services__accordion-button');
var textButtonOpen = document.querySelector('.services__icon-open');
var textButtonClose = document.querySelector('.services__icon-close');
var threadLiftingButtonShow = document.querySelector('.thread-lifting__accordion-button');
var threadLiftingButtonOpen = document.querySelector('.thread-lifting__icon-open');
var threadLiftingButtonClose = document.querySelector('.thread-lifting__icon-close');
var elosButtonShow = document.querySelector('.elos__accordion-button');
var elosButtonOpen = document.querySelector('.elos__icon-open');
var elosButtonClose = document.querySelector('.elos__icon-close');
var aestheticsButtonShow = document.querySelector('.aesthetics__accordion-button');
var aestheticsButtonOpen = document.querySelector('.aesthetics__icon-open');
var aestheticsButtonClose = document.querySelector('.aesthetics__icon-close');
var wrapBodyButtonShow = document.querySelector('.wrap-body__accordion-button');
var wrapBodyButtonOpen = document.querySelector('.wrap-body__icon-open');
var wrapBodyButtonClose = document.querySelector('.wrap-body__icon-close');
var massageButtonShow = document.querySelector('.massage__accordion-button');
var massageButtonOpen = document.querySelector('.massage__icon-open');
var massageButtonClose = document.querySelector('.massage__icon-close');
var epilationButtonShow = document.querySelector('.epilation__accordion-button');
var epilationButtonOpen = document.querySelector('.epilation__icon-open');
var epilationButtonClose = document.querySelector('.epilation__icon-close');
function showButtonText() {
  buttonShow.addEventListener('click', function () {
    if (textButtonClose.classList.contains('services__icon-close--hidden')) {
      textButtonOpen.classList.add('services__icon-open--hidden');
      textButtonClose.classList.remove('services__icon-close--hidden');
    } else {
      textButtonOpen.classList.remove('services__icon-open--hidden');
      textButtonClose.classList.add('services__icon-close--hidden');
    }
  });
}
function showButtonThreadLifting() {
  threadLiftingButtonShow.addEventListener('click', function () {
    if (threadLiftingButtonClose.classList.contains('thread-lifting__icon-close--hidden')) {
      threadLiftingButtonOpen.classList.add('thread-lifting__icon-open--hidden');
      threadLiftingButtonClose.classList.remove('thread-lifting__icon-close--hidden');
    } else {
      threadLiftingButtonOpen.classList.remove('thread-lifting__icon-open--hidden');
      threadLiftingButtonClose.classList.add('thread-lifting__icon-close--hidden');
    }
  });
}
function showButtonElos() {
  elosButtonShow.addEventListener('click', function () {
    if (elosButtonClose.classList.contains('elos__icon-close--hidden')) {
      elosButtonOpen.classList.add('elos__icon-open--hidden');
      elosButtonClose.classList.remove('elos__icon-close--hidden');
    } else {
      elosButtonOpen.classList.remove('elos__icon-open--hidden');
      elosButtonClose.classList.add('elos__icon-close--hidden');
    }
  });
}
function showButtonAesthetics() {
  aestheticsButtonShow.addEventListener('click', function () {
    if (aestheticsButtonClose.classList.contains('aesthetics__icon-close--hidden')) {
      aestheticsButtonOpen.classList.add('aesthetics__icon-open--hidden');
      aestheticsButtonClose.classList.remove('aesthetics__icon-close--hidden');
    } else {
      aestheticsButtonOpen.classList.remove('aesthetics__icon-open--hidden');
      aestheticsButtonClose.classList.add('aesthetics__icon-close--hidden');
    }
  });
}
function showButtonWrapBody() {
  wrapBodyButtonShow.addEventListener('click', function () {
    if (wrapBodyButtonClose.classList.contains('wrap-body__icon-close--hidden')) {
      wrapBodyButtonOpen.classList.add('wrap-body__icon-open--hidden');
      wrapBodyButtonClose.classList.remove('wrap-body__icon-close--hidden');
    } else {
      wrapBodyButtonOpen.classList.remove('wrap-body__icon-open--hidden');
      wrapBodyButtonClose.classList.add('wrap-body__icon-close--hidden');
    }
  });
}
function showButtonMassage() {
  massageButtonShow.addEventListener('click', function () {
    if (massageButtonClose.classList.contains('massage__icon-close--hidden')) {
      massageButtonOpen.classList.add('massage__icon-open--hidden');
      massageButtonClose.classList.remove('massage__icon-close--hidden');
    } else {
      massageButtonOpen.classList.remove('massage__icon-open--hidden');
      massageButtonClose.classList.add('massage__icon-close--hidden');
    }
  });
}
function showButtonEpilation() {
  epilationButtonShow.addEventListener('click', function () {
    if (epilationButtonClose.classList.contains('epilation__icon-close--hidden')) {
      epilationButtonOpen.classList.add('epilation__icon-open--hidden');
      epilationButtonClose.classList.remove('epilation__icon-close--hidden');
    } else {
      epilationButtonOpen.classList.remove('epilation__icon-open--hidden');
      epilationButtonClose.classList.add('epilation__icon-close--hidden');
    }
  });
}

},{}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Accordions = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var Accordions = exports.Accordions = /*#__PURE__*/function () {
  function Accordions() {
    _classCallCheck(this, Accordions);
    this._openHeight = 0;
    this._windowWidth = window.innerWidth;
    this._documentClickHandler = this._documentClickHandler.bind(this);
    this._windowResizeHandler = this._windowResizeHandler.bind(this);
    this._init();
  }
  _createClass(Accordions, [{
    key: "_init",
    value: function _init() {
      this.fullUpdate();
      document.addEventListener('click', this._documentClickHandler);
      window.addEventListener('resize', this._windowResizeHandler);
    }
  }, {
    key: "_documentClickHandler",
    value: function _documentClickHandler(evt) {
      var target = evt.target;
      if (!target.closest('[data-accordion="button"]')) {
        return;
      }
      evt.preventDefault();
      var parent = target.closest('[data-accordion="parent"]');
      if (parent.dataset.destroy && !window.matchMedia(parent.dataset.destroy).matches) {
        return;
      }
      var element = target.closest('[data-accordion="element"]');
      if (element.classList.contains('is-active')) {
        this.closeAccordion(element);
        return;
      }
      this.openAccordion(element);
    }
  }, {
    key: "_windowResizeHandler",
    value: function _windowResizeHandler() {
      if (this._windowWidth === window.innerWidth) {
        return;
      }
      this._windowWidth = window.innerWidth;
      this.updateAccordionsHeight();
    }
  }, {
    key: "closeAllAccordion",
    value: function closeAllAccordion(parent) {
      var _this = this;
      var elements = parent.querySelectorAll('[data-accordion="element"]');
      elements.forEach(function (element) {
        var currentParent = element.closest('[data-accordion="parent"]');
        if (currentParent === parent) {
          _this.closeAccordion(element);
        }
      });
    }
  }, {
    key: "updateAccordionsHeight",
    value: function updateAccordionsHeight() {
      var element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      if (element) {
        var content = element.querySelector('[data-accordion="content"]');
        content.style.transition = 'none';
        content.style.maxHeight = "".concat(content.scrollHeight, "px");
        setTimeout(function () {
          content.style.transition = null;
        });
        return;
      }
      var closeElements = document.querySelectorAll('[data-accordion="element"]:not(.is-active)');
      closeElements.forEach(function (closeElement) {
        var parent = closeElement.closest('[data-accordion="parent"]');
        var content = closeElement.querySelector('[data-accordion="content"]');
        if (parent.dataset.destroy && !window.matchMedia(parent.dataset.destroy).matches) {
          content.style.maxHeight = '100%';
          return;
        }
        content.style.maxHeight = null;
      });
      var openElements = document.querySelectorAll('[data-accordion="element"].is-active');
      openElements.forEach(function (openElement) {
        var content = openElement.querySelector('[data-accordion="content"]');
        var parent = openElement.closest('[data-accordion="parent"]');
        if (parent.dataset.destroy && !window.matchMedia(parent.dataset.destroy).matches) {
          content.style.maxHeight = '100%';
          return;
        }
        content.style.transition = 'none';
        content.style.maxHeight = "".concat(content.scrollHeight, "px");
        setTimeout(function () {
          content.style.transition = null;
        });
      });
    }
  }, {
    key: "fullUpdate",
    value: function fullUpdate() {
      var _this2 = this;
      var parent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var transition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var openElements;
      if (parent) {
        openElements = parent.querySelectorAll('[data-accordion="element"].is-active');
      } else {
        openElements = document.querySelectorAll('[data-accordion="element"].is-active');
      }
      openElements.forEach(function (openElement) {
        var innerParent = openElement.querySelector('[data-accordion="parent"]');
        if (innerParent) {
          return;
        }
        _this2.openAccordion(openElement, transition);
      });
      this.updateAccordionsHeight();
    }
  }, {
    key: "openAccordion",
    value: function openAccordion(element) {
      var transition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var parentElement = element.closest('[data-accordion="parent"]');
      var contentElement = element.querySelector('[data-accordion="content"]');
      this._openHeight += contentElement.scrollHeight;
      if (parentElement.hasAttribute('data-single')) {
        this.closeAllAccordion(parentElement);
      }
      element.classList.add('is-active');
      if (transition) {
        contentElement.style.maxHeight = "".concat(this._openHeight, "px");
      } else {
        contentElement.style.transition = 'none';
        contentElement.style.maxHeight = "".concat(this._openHeight, "px");
        setTimeout(function () {
          contentElement.style.transition = null;
        });
      }
      if (parentElement.closest('[data-accordion="element"]')) {
        this.openAccordion(parentElement.closest('[data-accordion="element"]'), transition);
        return;
      }
      this._openHeight = 0;
    }
  }, {
    key: "closeAccordion",
    value: function closeAccordion(element) {
      var transition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var contentElement = element.querySelector('[data-accordion="content"]');
      if (!contentElement) {
        return;
      }
      element.classList.remove('is-active');
      if (transition) {
        contentElement.style.maxHeight = '0';
      } else {
        contentElement.style.transition = 'none';
        contentElement.style.maxHeight = '0';
        setTimeout(function () {
          contentElement.style.transition = null;
        });
      }
    }
  }]);
  return Accordions;
}();

},{}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initAccordions = exports.accordions = void 0;
var _accordions = require("./accordions.js");
var accordions;
var initAccordions = exports.initAccordions = function initAccordions() {
  exports.accordions = accordions = new _accordions.Accordions();
  // Используйте в разработке экспортируемую переменную accordions, window сделан для бэкэнда
  window.accordions = accordions;
};

},{"./accordions.js":2}],4:[function(require,module,exports){
"use strict";

var _initAccordion = require("./init-accordion");
var _accordionsButton = require("./accordions-button");
window.addEventListener('DOMContentLoaded', function () {
  // Utils
  // ---------------------------------

  // Modules
  // ---------------------------------
  (0, _accordionsButton.showButtonText)();
  (0, _accordionsButton.showButtonThreadLifting)();
  (0, _accordionsButton.showButtonElos)();
  (0, _accordionsButton.showButtonAesthetics)();
  (0, _accordionsButton.showButtonWrapBody)();
  (0, _accordionsButton.showButtonMassage)();
  (0, _accordionsButton.showButtonEpilation)();
  // все скрипты должны быть в обработчике 'DOMContentLoaded', но не все в 'load'
  // в load следует добавить скрипты, не участвующие в работе первого экрана
  window.addEventListener('load', function () {
    (0, _initAccordion.initAccordions)();
  });
});

},{"./accordions-button":1,"./init-accordion":3}]},{},[4])


//# sourceMappingURL=main.min.js.map
